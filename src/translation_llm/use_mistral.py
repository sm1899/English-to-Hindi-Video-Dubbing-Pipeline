import os
from dotenv import load_dotenv
# Import the new client class
from mistralai import Mistral 
# MistralClient is deprecated
# from mistralai.client import MistralClient 
# ChatMessage is deprecated; use dicts or specific message classes like UserMessage
# from mistralai.models.chat_completion import ChatMessage
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Load environment variables from .env file
load_dotenv()

MISTRAL_API_KEY = os.getenv("mistral_auth_token")
if not MISTRAL_API_KEY:
    logging.error("Mistral API key not found in environment variables.")
    raise ValueError("Mistral API key not found. Please set the mistral_auth_token in your .env file.")

# Initialize Mistral client using the new class name
try:
    client = Mistral(api_key=MISTRAL_API_KEY)
    # Use a model known for good multilingual capabilities if available,
    # otherwise default to a strong general model.
    # Check Mistral documentation for the best translation models.
    MISTRAL_MODEL = "mistral-large-latest" 
    logging.info(f"Mistral client initialized successfully with model: {MISTRAL_MODEL}")
except Exception as e:
    logging.error(f"Failed to initialize Mistral client: {e}")
    raise

def translate_mistral(text: str, target_language_code: str = "hi", source_language: str = "English") -> str | None:
    """
    Translates text from source_language to the target_language_code using the Mistral API.

    Args:
        text: The text to translate.
        target_language_code: The ISO 639-1 code for the target language (e.g., "hi" for Hindi).
        source_language: The name of the source language (e.g., "English").

    Returns:
        The translated text, or None if translation fails.
    """
    if not text:
        logging.warning("Received empty text for translation.")
        return ""

    target_language_map = {
        "hi": "Hindi",
        # Add other language mappings as needed
    }
    target_language_name = target_language_map.get(target_language_code)
    if not target_language_name:
        logging.error(f"Unsupported target language code: {target_language_code}")
        return None

    # System prompt to provide context
    system_prompt = (
        f"You are part of an automatic video dubbing pipeline. "
        f"Translate the following text accurately from {source_language} to {target_language_name}. "
        f"The {source_language} text is generated by an Automatic Speech Recognition (ASR) system "
        f"and may contain transcription errors or disfluencies. "
        f"Focus on conveying the core meaning accurately in {target_language_name}. "
        f"Output ONLY the translated text."
    )

    # User prompt containing the actual text to translate
    user_prompt = text
    
    # Construct messages list with system and user prompts
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt}
    ]

    try:
        logging.info(f"Sending text for translation to {target_language_name}: '{text[:50]}...'")
        chat_response = client.chat.complete(
            model=MISTRAL_MODEL,
            messages=messages,
            temperature=0.1 # Lower temperature for more deterministic translation
        )

        if chat_response.choices and chat_response.choices[0].message:
            translated_text = chat_response.choices[0].message.content.strip()
            logging.info(f"Received translation: '{translated_text[:50]}...'")
            return translated_text
        else:
            logging.warning("Received no translation content from Mistral API.")
            return None
    except Exception as e:
        logging.error(f"Error during Mistral API call: {e}")
        return None

# Example usage (optional, for testing)
if __name__ == "__main__":
    load_dotenv() # Ensure .env is loaded when run directly
    MISTRAL_API_KEY = os.getenv("mistral_auth_token")
    if not MISTRAL_API_KEY:
        print("Error: Mistral API key not found in .env file.")
    else:
        print("Mistral client setup appears correct.")
        
        english_text = "Hello, how are you?"
        hindi_translation = translate_mistral(english_text, target_language_code="hi")

        if hindi_translation:
            print(f"Original: {english_text}")
            print(f"Hindi Translation: {hindi_translation}")
        else:
            print("Translation failed.")

        # Test empty input
        print("Testing empty input:")
        empty_translation = translate_mistral("")
        print(f"Empty input translation: '{empty_translation}'") 